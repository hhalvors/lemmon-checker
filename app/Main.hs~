module Main where

import LemmonChecker (checkProof)
import ProofTypes (Proof)
import Data.Aeson (eitherDecode)
import qualified Data.ByteString.Lazy as B
import System.Environment (getArgs)

main :: IO ()
main = do
  args <- getArgs
  case args of
    [filename] -> do
      putStrLn $ "üîç Attempting to read " ++ filename ++ "..."
      input <- B.readFile filename
      case eitherDecode input of
        Left err -> putStrLn $ "‚ùå JSON parse error: " ++ err
        Right proof -> do
          putStrLn "‚úÖ Parsed successfully. Running checker..."
          case checkProof proof of
            Left msg -> putStrLn msg
            Right msg -> putStrLn msg
    _ -> putStrLn "Usage: lemmon-check <proof.json>"

